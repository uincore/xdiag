#include "stdafx.h"
#include "LdfManager.h"
#include "LDFTagDefines.h"
#include "LDFGenerator1_3.h"
#include "LDFGenerator2_0.h"
#include "LDFGenerator2_1.h"
#include "LDFGrammerLexer.hpp"
#include "LDFGrammerParser.hpp"
using namespace User;


ERRORCODE ILdfManager::nSaveLDFToFile(LDFCluster* pouLdfCluster, std::string strLDFFilePath)
{

    LIN_Settings ouLinSettings;
    ERRORCODE ecCode = pouLdfCluster->GetProperties(eLINClusterProperties, &ouLinSettings);

    if ( ecCode == EC_SUCCESS)
    {
        ILDFGenerator* pLdfGenerator = nullptr;
        if(ouLinSettings.m_dProtocolVers == defVersion_1_3)
        {
            pLdfGenerator = new CLDFGenerator1_3();
        }
        else if(ouLinSettings.m_dProtocolVers == defVersion_2_0)
        {
            pLdfGenerator = new CLDFGenerator2_0();
        }
        else if(ouLinSettings.m_dProtocolVers == defVersion_2_1)
        {
            pLdfGenerator = new CLDFGenerator2_1();
        }

        if(nullptr != pLdfGenerator)
        {
            pLdfGenerator->nSaveLDFDetails(pouLdfCluster, strLDFFilePath);

            return EC_SUCCESS;

        }

    }
    return EC_FAILURE;
}

ERRORCODE ILdfManager::nLoadLDFFromFile(LDFCluster* pouLdfCluster, std::string strLDFFilePath, std::list<ParsingResults>& ouErrors, std::list<ParsingResults>& ouWarnings)
{
    if ( strLDFFilePath != "" )
    {
        ANTLR_UINT8* fName;
        fName   = (ANTLR_UINT8*)strLDFFilePath.c_str();

        LDFGrammerLexer::nCommentChannel = 0;
        LDFGrammerLexer::InputStreamType input(fName, ANTLR_ENC_8BIT);
        LDFGrammerLexer lxr(&input);        // CLexerNew is generated by ANTLR
        LDFGrammerParser::TokenStreamType tstream(ANTLR_SIZE_HINT, lxr.get_tokSource() );

        std::string strHeader;

        LDFGrammerParser psr(&tstream);  // CParserNew is generated by ANTLR3
        psr.ldf_file(pouLdfCluster);
        psr.GetParsingResults(ouErrors, ouWarnings);
        if ( ouErrors.size() > 0)
        {
            return EC_FAILURE;
        }
        else if ( ouWarnings.size() > 0)
        {
            return EC_WARNING_SUCCESS;
        }
        return EC_SUCCESS;
    }
    return EC_FAILURE;
}

